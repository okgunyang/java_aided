# 구조 패턴 (Structural Pattern)
클래스나 객체를 조합해 더 큰 구조를 만드는 패턴으로 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴으로 예를 들어 서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴이다.

## 어댑터 패턴(Adapter Pattern)
이미 제공되고 있는 클래스나 인터페이스를 그대로 사용할 수 없는 경우 그 형태를 변환해 이용하기 위한 클래스나 인터페이스를 만들어 제공하는 패턴

## 브릿지 패턴(Bridge Pattern)
기능 클래스와 구현 클래스 간의 교량 역할을 하는 클래스를 두어 기능을 가진 것과 구현 역할을 동시에 하는 인터페이스로 재규정하여 사용하는 방식의 패턴

## 컴포짓 패턴(Composite Pattern)
두 개의 클래스가 복합이 가능하도록 엔트리라는 인터페이스나 추상화 클래스로 부터 상속하여 각 객체의 데이터 조합이 가능하도록 하는 패턴

## 장식자 패턴(Composite Pattern)
기본 슈퍼 클래스로 부터 상속 받아 기존의 내용에 필요한 요소를 계속 덧 붙여 나가는 방식의 디자인 패턴

## 퍼사드 패턴(Facade Pattern)
건물의 정면 또는 창구 라는 의미로  인터페이스나 클래스를 만들어 해당 되는 내용을 실행하기 위하여는 해당 창구나 경로를 통해서 들어와서 진행될 수 있도록 하는 디자인 패턴

## 경량화 패턴(Flyweight Pattern)
객체가 차지하고 있는 메모리 용량이나 자원을 최대한 공유하여 덩치를 작게 만드는 디자인 패턴

